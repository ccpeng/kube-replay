package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"time"

	"github.com/ccpeng/kube-replay/graph/model"
	"github.com/ccpeng/kube-replay/internal/services"
)

// RecordNodeAtTimestamp is the resolver for the recordNodeAtTimestamp field.
func (r *mutationResolver) RecordNodeAtTimestamp(ctx context.Context, input model.NodeSnapshotInput) (string, error) {
	replayer, err := services.NewReplayer("k8s")
	if err != nil {
		return "", fmt.Errorf("unable to create replayer: %v", err)
	}

	err = replayer.RecordNodeSnapshot(ctx, &input)
	if err != nil {
		return "", fmt.Errorf("unable to record node snapshot: %v", err)
	}

	return input.ID, nil
}

// NodeStatesAtTimestamp is the resolver for the nodeStatesAtTimestamp field.
func (r *queryResolver) NodeStatesAtTimestamp(ctx context.Context, timestamp time.Time) (*model.TimedNodeSnapshots, error) {
	replayer, err := services.NewReplayer("k8s")
	if err != nil {
		return nil, fmt.Errorf("unable to create replayer: %v", err)
	}

	return replayer.EffectiveAtSnapshot(ctx, timestamp)
}

// NodeStatesRange is the resolver for the nodeStatesRange field.
func (r *queryResolver) NodeStatesRange(ctx context.Context, start time.Time, end time.Time, step int64) ([]*model.TimedNodeSnapshots, error) {
	replayer, err := services.NewReplayer("k8s")
	if err != nil {
		return nil, fmt.Errorf("unable to create replayer: %v", err)
	}

	return replayer.IntervalSnapshots(ctx, start, end, step)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
